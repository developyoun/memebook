name: CD

on:
  push: #해당 브랜치에 push(merge) 했을 때
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      #jdk 세팅
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # #gradle 캐싱
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      # ### CD
      #배포를 위한 prod properties 설정
      - name: Make application-prod.properties
        run: |
          cd ./back/src/main/resources
          touch application.yml
          echo "${{ secrets.PROPERTIES_DEV }}" > ./application.yml
        shell: bash

      #test를 제외한 프로젝트 빌드
      - name: Build With Gradle
        run: |
          cd back
          ./gradlew clean build -x test
        env:
          CI: ""

      #도커 빌드 & 이미지 push
      - name: Docker build & Push
        run: |
          cd back
          docker login -u ${{ secrets.DOCKER_ID }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t pyoun820/memebook .
          docker push pyoun820/memebook
      #docker-compose 파일을 ec2 서버에 배포
      - name: Deploy to Prod
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            docker rm -f app
            docker rmi -f $(docker images -q -f "dangling=true")
            docker pull pyoun820/memebook
            docker compose -f ${{ secrets.DEV_COMPOSE }} up -d --build
