name: Docker CI/CD

on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 기본 체크아웃
      - name: checkout
        uses: actions/checkout@v3
      ## 1) git ignore에 등록된 application.properties 파일 생성해주기
      - name: set application.properties
        run: |
          cd ./back/src/main/resources
          touch ./application.yml
          echo "${{ secrets.PROPERTIES }}" > .application.yml
        shell: bash
      - name: Set up JDK17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'
      ## 2) 스프링 프로젝트 jar 파일 빌드
      - name: gradle build
        run: chmod +x back/gradlew
      - name: Build with Gradle
        env:
          CI: ""
        run: |
          cd ./back
          ./gradlew clean build -x test --no-daemon
      ## 3) Docker Hub에 이미지 push 하기
      - name: Docker build
        run: |
          cd ./back
          docker login -u ${{ secrets.USERNAME }} -p ${{ secrets.PASSWORD }}
          docker build -t ${{ secrets.USERNAME }}/${{ secrets.IMAGE_NAME }} . 
          docker push ${{ secrets.USERNAME }}/${{ secrets.IMAGE_NAME }}
      ## 4) Docker Hub에 Push한 이미지를 리눅스 서버에 받아와서 run
      - name: Deploy
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}          
          script: |
            docker login -u ${{ secrets.USERNAME }} -p ${{ secrets.PASSWORD }}
            sudo docker rm $(docker ps -aq)
            sudo docker rmi ${{ secrets.USERNAME }}/${{ secrets.IMAGE_NAME }}
            sudo docker pull ${{ secrets.USERNAME }}/${{ secrets.IMAGE_NAME }}
            sudo docker compose -f docker-compose-dev.yml up -d
